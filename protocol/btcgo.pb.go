// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btcgo.proto

/*
Package btcgo is a generated protocol buffer package.

It is generated from these files:
	btcgo.proto

It has these top-level messages:
	Transaction
	Address
	Amount
	Empty
*/
package btcgo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Transaction struct {
	FromAddress *Address `protobuf:"bytes,1,opt,name=fromAddress" json:"fromAddress,omitempty"`
	ToAddress   *Address `protobuf:"bytes,2,opt,name=toAddress" json:"toAddress,omitempty"`
	Amount      *Amount  `protobuf:"bytes,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) GetFromAddress() *Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *Transaction) GetToAddress() *Address {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *Transaction) GetAmount() *Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Amount struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *Amount) Reset()                    { *m = Amount{} }
func (m *Amount) String() string            { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()               {}
func (*Amount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Amount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Transaction)(nil), "Transaction")
	proto.RegisterType((*Address)(nil), "Address")
	proto.RegisterType((*Amount)(nil), "Amount")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Btcgo service

type BtcgoClient interface {
	Send(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Amount, error)
	CreateWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Address, error)
}

type btcgoClient struct {
	cc *grpc.ClientConn
}

func NewBtcgoClient(cc *grpc.ClientConn) BtcgoClient {
	return &btcgoClient{cc}
}

func (c *btcgoClient) Send(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/Btcgo/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcgoClient) GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Amount, error) {
	out := new(Amount)
	err := grpc.Invoke(ctx, "/Btcgo/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcgoClient) CreateWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/Btcgo/CreateWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Btcgo service

type BtcgoServer interface {
	Send(context.Context, *Transaction) (*Transaction, error)
	GetBalance(context.Context, *Address) (*Amount, error)
	CreateWallet(context.Context, *Empty) (*Address, error)
}

func RegisterBtcgoServer(s *grpc.Server, srv BtcgoServer) {
	s.RegisterService(&_Btcgo_serviceDesc, srv)
}

func _Btcgo_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcgoServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Btcgo/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcgoServer).Send(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Btcgo_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcgoServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Btcgo/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcgoServer).GetBalance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Btcgo_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcgoServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Btcgo/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcgoServer).CreateWallet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Btcgo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Btcgo",
	HandlerType: (*BtcgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Btcgo_Send_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Btcgo_GetBalance_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Btcgo_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btcgo.proto",
}

func init() { proto.RegisterFile("btcgo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x13, 0x4a, 0x63, 0x7a, 0xee, 0x74, 0x03, 0x8a, 0xb2, 0x50, 0x0c, 0x42, 0x88, 0xc1,
	0x43, 0x79, 0x82, 0x16, 0x21, 0xf6, 0x80, 0xc4, 0x7c, 0x4d, 0x0c, 0x42, 0x4a, 0xec, 0xca, 0x39,
	0x06, 0x56, 0x9e, 0x1c, 0xd5, 0xc4, 0x26, 0x74, 0xfc, 0x7c, 0x9f, 0xef, 0xf7, 0x6f, 0x90, 0x3b,
	0x6e, 0xde, 0x9d, 0xde, 0x7b, 0xc7, 0x4e, 0x7d, 0xe7, 0x20, 0x5f, 0x3c, 0xd9, 0x81, 0x1a, 0xfe,
	0x70, 0x16, 0xef, 0x40, 0xbe, 0x79, 0xd7, 0x6f, 0xda, 0xd6, 0x9b, 0x61, 0x28, 0xf3, 0x55, 0x7e,
	0x2b, 0xd7, 0x67, 0x7a, 0xe4, 0x7a, 0x3a, 0xc4, 0x1b, 0x58, 0xb0, 0x8b, 0xe6, 0xc9, 0x91, 0xf9,
	0x37, 0xc2, 0x0b, 0x28, 0xa8, 0x77, 0x9f, 0x96, 0xcb, 0x59, 0x90, 0x84, 0xde, 0x04, 0xac, 0xc7,
	0x63, 0x75, 0x05, 0x22, 0xba, 0x25, 0x08, 0x9a, 0x64, 0x2f, 0xea, 0x88, 0x6a, 0x05, 0xc5, 0xef,
	0x35, 0x3c, 0x4f, 0xfb, 0x0e, 0xca, 0x2c, 0xad, 0x11, 0x30, 0x7f, 0xec, 0xf7, 0xfc, 0xb5, 0x66,
	0x98, 0x6f, 0x0f, 0x1d, 0xf1, 0x1a, 0x4e, 0x9f, 0x8d, 0x6d, 0x71, 0xa9, 0x27, 0x1d, 0xab, 0x7f,
	0xa4, 0x32, 0xbc, 0x04, 0x78, 0x32, 0xbc, 0xa5, 0x8e, 0x6c, 0x63, 0x30, 0x55, 0xa8, 0xe2, 0x3b,
	0x55, 0x86, 0x0a, 0x96, 0x0f, 0xde, 0x10, 0x9b, 0x57, 0xea, 0x3a, 0xc3, 0x58, 0xe8, 0x90, 0x54,
	0x25, 0x59, 0x65, 0xbb, 0x22, 0xfc, 0xe8, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0xf5,
	0x61, 0xf1, 0x60, 0x01, 0x00, 0x00,
}
